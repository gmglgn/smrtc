// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

contract SingleOwnerWallet {
    // Inlined nonReentrant guard
    error ReentrantCall();
    uint256 private _entered;
    modifier nonReentrant() {
        if (_entered == 1) revert ReentrantCall();
        _entered = 1;
        _;
        _entered = 0;
    }

    error NotOwner();

    event Deposit(address indexed from, uint256 amount);
    event Executed(address indexed to, uint256 value, bytes data, bytes result);

    address public owner;

    constructor() { owner = msg.sender; }

    modifier onlyOwner() {
        if (msg.sender != owner) revert NotOwner();
        _;
    }

    receive() external payable { emit Deposit(msg.sender, msg.value); }

    /// @notice Execute arbitrary call as owner (be careful).
    function execute(address to, uint256 value, bytes calldata data) external onlyOwner nonReentrant returns (bytes memory result) {
        (bool ok, bytes memory res) = to.call{value: value}(data);
        require(ok, "call failed");
        emit Executed(to, value, data, res);
        return res;
    }
}
